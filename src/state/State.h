// Generated by dia2code
#ifndef STATE__STATE__H
#define STATE__STATE__H

#include <vector>
#include <string>

namespace state {
  class Element;
  class ElementFactory;
  class Weapon;
  class Observable;
  class StaticElement;
  class MobileElement;
}

#include "WeaponStatus.h"
#include "Observable.h"
#include "StaticElement.h"
#include "ElementFactory.h"
#include "MobileElement.h"

namespace state {

  /// class State - 
  class State : public state::Observable {
    // Associations
    // Attributes
  protected:
    std::vector<Element*> elements;
    std::vector<Element*> background;
    ElementFactory* factory;
    std::vector<Weapon*> weapons;
    int nbWhiteDead;
    int nbGreenDead;
    // Operations
  public:
    void setElementFactory (ElementFactory* f);
    std::vector<Element*> getMobileElements ();
    Element* getMobileElement (int idx);
    void setMobileElement (Element* el, int idx);
    std::vector<Element*> getStaticElements ();
    Element* getStaticElement (int idx);
    void loadLevel (const std::string& file_name);
    void loadChar (const std::string& file_name);
    virtual ~State ();
    void killFowl ();
    int selectNextFowl (bool keepview);
    int getSelected ();
    void selectWeapon (WeaponStatus status, int idx);
    void setWeaponVisibility (bool visible, int idx);
    std::vector<Weapon*> getWeaponElements ();
    Weapon* getWeaponElement (int idx);
    void setWeaponElement (Weapon* we, int idx);
    int getNbWhiteDead ();
    int getNbGreenDead ();
    void setNbWhiteDead (int nb);
    void setNbGreenDead (int nb);
    void resetState ();
    void initializeWeaponAmmo ();
  };

};

#endif
