// Generated by dia2code
#ifndef STATE__STATE__H
#define STATE__STATE__H

#include <vector>
#include <string>

namespace state {
  class MobileElement;
  class ElementFactory;
  class Element;
  class Observable;
  class StaticElement;
}

#include "Observable.h"
#include "StaticElement.h"
#include "ElementFactory.h"
#include "MobileElement.h"

namespace state {

  /// class State - 
  class State : public state::Observable {
    // Associations
    // Attributes
  protected:
    std::vector<MobileElement*> elements;
    ElementFactory* factory;
    std::vector<Element*> background;
    // Operations
  public:
    void setElementFactory (ElementFactory* f);
    std::vector<MobileElement*> getMobileElements ();
    MobileElement* getMobileElement (int idx);
    std::vector<Element*> getStaticElements ();
    Element* getStaticElement (int idx);
    std::vector<Element*> loadLevel (const std::string& file_name);
    virtual ~State ();
  };

};

#endif
